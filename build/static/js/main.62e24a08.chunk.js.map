{"version":3,"sources":["serviceWorker.js","components/Header.js","components/TodoItem.js","components/TodosList.js","components/InputTodo.js","components/TodoContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","style","padding","lineHeight","fontSize","marginBottom","TodoItem","props","todo","completed","id","title","handleChangeProps","deleteTodoProps","className","type","checked","onChange","onClick","fontStyle","color","opacity","textDecoration","TodosList","this","todos","map","key","Component","InputTodo","state","onChangeHandler","e","setState","target","name","value","handleSubmitHandler","addTodoProps","preventDefault","onSubmit","placeholder","TodoContainer","handleChange","console","log","addTodoItem","axios","post","then","response","data","delTodo","delete","filter","get","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uCCESC,EAlBA,WAMX,OACI,4BAAQC,MANQ,CAChBC,QAAS,SACTC,WAAY,QAKR,wBAAIF,MAAO,CAAEG,SAAU,OAAQC,aAAc,SAA7C,mBAGA,uBAAGJ,MAAO,CAAEG,SAAU,SAAtB,uDCkBGE,MA7Bf,SAAkBC,GAAQ,IAAD,EAIjBA,EAFAC,KAAQC,EAFS,EAETA,UAAWC,EAFF,EAEEA,GAAIC,EAFN,EAEMA,MACvBC,EACAL,EADAK,kBAAmBC,EACnBN,EADmBM,gBASvB,OACI,wBAAIC,UAAU,aACV,2BAAOC,KAAK,WACRC,QAASP,EACTQ,SAAU,kBAAML,EAAkBF,MAEtC,4BACIQ,QAAS,kBAAML,EAAgBH,KADnC,UAIA,0BAAMT,MAAOQ,EAjBE,CACnBU,UAAW,SACXC,MAAO,UACPC,QAAS,GACTC,eAAgB,gBAa8B,MACrCX,KCtBIY,E,uKAEP,IAAD,EACiDC,KAAKjB,MAAnDkB,EADH,EACGA,MAAOb,EADV,EACUA,kBAAmBC,EAD7B,EAC6BA,gBAElC,OACI,6BACKY,EAAMC,KAAI,SAAAlB,GAAI,OACX,kBAAC,EAAD,CACImB,IAAKnB,EAAKE,GACVF,KAAMA,EACNI,kBAAmBA,EACnBC,gBAAiBA,Y,GAZFe,a,QCDlBC,E,4MACjBC,MAAQ,CACJnB,MAAO,I,EAGXoB,gBAAkB,SAACC,GACf,EAAKC,SAAL,eACKD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,S,EAIlCC,oBAAsB,SAACL,GAAO,IAClBM,EAAiB,EAAK/B,MAAtB+B,aACRN,EAAEO,iBACFD,EAAa,EAAKR,MAAMnB,OACxB,EAAKsB,SAAS,CACVtB,MAAO,M,uDAKX,OACI,6BACI,0BAAM6B,SAAUhB,KAAKa,oBAAqBvB,UAAU,kBAChD,2BACIC,KAAK,OACLD,UAAU,aACVqB,KAAK,QACLM,YAAY,cACZL,MAAOZ,KAAKM,MAAMnB,MAClBM,SAAUO,KAAKO,kBAEnB,2BAAOhB,KAAK,SACRD,UAAU,eACVsB,MAAM,iB,GAlCSR,a,gBCKlBc,E,4MACjBZ,MAAQ,CACJL,MAAO,I,EAWXkB,aAAe,SAAAjC,GACXkC,QAAQC,IAAI,eAAgBnC,GAC5B,EAAKuB,SAAS,CACVR,MAAO,EAAKK,MAAML,MAAMC,KAAI,SAAAlB,GAIxB,OAHIA,EAAKE,KAAOA,IACZF,EAAKC,WAAaD,EAAKC,WAEpBD,Q,EAKnBsC,YAAc,SAACnC,GACXoC,IACKC,KAAK,6CAA8C,CAChDrC,MAAOA,EACPF,WAAW,IAEdwC,MAAK,SAAAC,GAAQ,OACV,EAAKjB,SAAS,CACVR,MAAM,GAAD,mBAAM,EAAKK,MAAML,OAAjB,CAAwByB,EAASC,a,EAKtDC,QAAU,SAAA1C,GACNqC,IACKM,OADL,qDAC0D3C,IACrDuC,MAAK,SAAAC,GAAQ,OACV,EAAKjB,SAAS,CACVR,MAAM,YACC,EAAKK,MAAML,MAAM6B,QAAO,SAAA9C,GACvB,OAAOA,EAAKE,KAAOA,Y,kEAxCtB,IAAD,OAChBqC,IAAMQ,IAAI,wDACLN,MAAK,SAAAC,GACF,EAAKjB,SAAS,CAAER,MAAOyB,EAASC,Y,+BA6CxC,OACI,yBAAKrC,UAAU,aACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIwB,aAAcd,KAAKsB,cAEvB,kBAAC,EAAD,CACIrB,MAAOD,KAAKM,MAAML,MAClBb,kBAAmBY,KAAKmB,aACxB9B,gBAAiBW,KAAK4B,e,GA9DCxB,aCC3C4B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.62e24a08.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\"\n\nconst Header = () => {\n    const headerStyle = {\n        padding: \"20px 0\",\n        lineHeight: \"2em\",\n    }\n\n    return (\n        <header style={headerStyle}>\n            <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\" }}>\n                Simple Todo App\n      </h1>\n            <p style={{ fontSize: \"19px\" }}>\n                Please add to-dos item(s) through the input field\n      </p>\n        </header>\n    )\n}\n\nexport default Header","import React from 'react'\n\nfunction TodoItem(props) {\n    const {\n        todo: { completed, id, title },\n        handleChangeProps, deleteTodoProps\n    } = props;\n    const completedStyle = {\n        fontStyle: \"italic\",\n        color: \"#d35e0f\",\n        opacity: 0.4,\n        textDecoration: \"line-through\",\n    }\n\n    return (\n        <li className=\"todo-item\">\n            <input type=\"checkbox\"\n                checked={completed}\n                onChange={() => handleChangeProps(id)}\n            />\n            <button\n                onClick={() => deleteTodoProps(id)}>\n                Delete\n                </button>\n            <span style={completed ? completedStyle : null}>\n                {title}\n            </span>\n        </li>\n    )\n}\n\nexport default TodoItem;\n","import React, { Component } from 'react'\nimport TodoItem from \"./TodoItem\";\n\nexport default class TodosList extends Component {\n\n    render() {\n        const { todos, handleChangeProps, deleteTodoProps } = this.props;\n\n        return (\n            <div>\n                {todos.map(todo => (\n                    <TodoItem\n                        key={todo.id}\n                        todo={todo}\n                        handleChangeProps={handleChangeProps}\n                        deleteTodoProps={deleteTodoProps}\n                    />\n                ))}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\nexport default class InputTodo extends Component {\n    state = {\n        title: \"\"\n    }\n\n    onChangeHandler = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmitHandler = (e) => {\n        const { addTodoProps } = this.props;\n        e.preventDefault();\n        addTodoProps(this.state.title);\n        this.setState({\n            title: \"\"\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmitHandler} className=\"form-container\">\n                    <input\n                        type=\"text\"\n                        className=\"input-text\"\n                        name=\"title\"\n                        placeholder=\"Add Todo...\"\n                        value={this.state.title}\n                        onChange={this.onChangeHandler}\n                    />\n                    <input type=\"submit\"\n                        className=\"input-submit\"\n                        value=\"Submit\"\n                    />\n                </form>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Header from \"./Header\"\nimport TodosList from './TodosList';\nimport InputTodo from \"./InputTodo\"\nimport axios from \"axios\";\n// import { v4 as uuidv4 } from \"uuid\";\n\nexport default class TodoContainer extends Component {\n    state = {\n        todos: []\n    }\n\n    componentDidMount() {\n        axios.get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n            .then(response => {\n                this.setState({ todos: response.data })\n            }\n            );\n    }\n\n    handleChange = id => {\n        console.log(\"todo clicked\", id);\n        this.setState({\n            todos: this.state.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed;\n                }\n                return todo;\n            })\n        })\n    };\n\n    addTodoItem = (title) => {\n        axios\n            .post(\"https://jsonplaceholder.typicode.com/todos\", {\n                title: title,\n                completed: false,\n            })\n            .then(response =>\n                this.setState({\n                    todos: [...this.state.todos, response.data],\n                })\n            )\n    }\n\n    delTodo = id => {\n        axios\n            .delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n            .then(response =>\n                this.setState({\n                    todos: [\n                        ...this.state.todos.filter(todo => {\n                            return todo.id !== id\n                        }),\n                    ],\n                })\n            )\n    };\n\n    render() {\n        return (\n            <div className=\"container\">\n                <Header />\n                <InputTodo\n                    addTodoProps={this.addTodoItem}\n                />\n                <TodosList\n                    todos={this.state.todos}\n                    handleChangeProps={this.handleChange}\n                    deleteTodoProps={this.delTodo}\n                />\n            </div>\n        )\n    }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport TodoContainer from \"./components/TodoContainer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}