{"version":3,"sources":["serviceWorker.js","components/TodoItem.js","components/TodosList.js","components/Header.js","components/InputTodo.js","components/TodoContainer.js","index.js"],"names":["Boolean","window","location","hostname","match","TodoItem","props","todo","completed","id","title","handleChangeProps","deleteTodoProps","useEffect","alert","className","type","checked","onChange","onClick","style","fontStyle","color","opacity","textDecoration","TodosList","todos","map","key","Header","headerSpan","isInitialMount","useRef","bgColor","Math","floor","random","current","document","getElementById","innerHTML","backgroundColor","padding","lineHeight","fontSize","marginBottom","InputTodo","addTodoProps","useState","inputText","setInputText","onSubmit","e","preventDefault","placeholder","value","name","target","TodoContainer","setTodos","show","setShow","console","log","axios","get","then","response","data","newTodo","filter","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d0f7927a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect } from \"react\"\n\nconst TodoItem = props => {\n    const completedStyle = {\n        fontStyle: \"italic\",\n        color: \"#d35e0f\",\n        opacity: 0.4,\n        textDecoration: \"line-through\",\n    };\n    const { todo: { completed, id, title }, handleChangeProps, deleteTodoProps } = props;\n\n    useEffect(() => {\n        return () => {\n            alert(\"Item about to be deleted!\")\n        }\n    }, [])\n\n    return (\n        <li className=\"todo-item\">\n            <input\n                type=\"checkbox\"\n                checked={completed}\n                onChange={() => handleChangeProps(id)}\n            />\n            <button onClick={() => deleteTodoProps(id)}>Delete</button>\n            <span style={completed ? completedStyle : null}>{title}</span>\n        </li>\n    )\n}\n\nexport default TodoItem","import React from \"react\"\nimport TodoItem from \"./TodoItem\"\n\nconst TodosList = props => {\n    const { todos, handleChangeProps, deleteTodoProps } = props;\n\n    return (\n        <div>\n            {todos.map(todo => (\n                <TodoItem\n                    key={todo.id}\n                    todo={todo}\n                    handleChangeProps={handleChangeProps}\n                    deleteTodoProps={deleteTodoProps}\n                />\n            ))}\n        </div>\n    )\n}\n\nexport default TodosList;","import React, { useEffect, useRef } from \"react\";\n\nconst Header = props => {\n    const { headerSpan } = props;\n    const headerStyle = {\n        padding: \"20px 0\",\n        lineHeight: \"2em\",\n    };\n    const isInitialMount = useRef(true);\n\n    useEffect(() => {\n        var x = Math.floor(Math.random() * 256);\n        var y = Math.floor(Math.random() * 256);\n        var z = Math.floor(Math.random() * 256);\n        var bgColor = \"rgb(\" + x + \",\" + y + \",\" + z + \")\";\n\n        if (isInitialMount.current) {\n            isInitialMount.current = false;\n        } else {\n            document.getElementById(\"inH1\").innerHTML = \"clicked\";\n            document.getElementById(\"inH1\").style.backgroundColor = bgColor;\n        }\n    }, [headerSpan]);\n\n    return (\n        <header style={headerStyle}>\n            <h1 style={{ fontSize: \"25px\", marginBottom: \"15px\" }}>\n                Simple Todo App <span id=\"inH1\"></span>\n            </h1>\n            <p style={{ fontSize: \"19px\" }}>\n                Please add to-dos item(s) through the input field\n          </p>\n        </header>\n    )\n};\n\nexport default Header;","import React, { useState } from \"react\"\n\nconst InputTodo = props => {\n    const { addTodoProps } = props;\n    const [inputText, setInputText] = useState({\n        title: \"\",\n    })\n\n    const onChange = e => {\n        setInputText({\n            ...inputText,\n            [e.target.name]: e.target.value,\n        })\n    }\n\n    const handleSubmit = e => {\n        e.preventDefault()\n        addTodoProps(inputText.title)\n        setInputText({\n            title: \"\",\n        })\n    }\n\n    return (\n        <form onSubmit={handleSubmit} className=\"form-container\">\n            <input\n                type=\"text\"\n                className=\"input-text\"\n                placeholder=\"Add todo...\"\n                value={inputText.title}\n                name=\"title\"\n                onChange={onChange}\n            />\n            <input type=\"submit\" className=\"input-submit\" value=\"Submit\" />\n        </form>\n    )\n}\n\nexport default InputTodo;","import React, { useState, useEffect } from \"react\";\nimport TodosList from \"./TodosList\";\nimport Header from \"./Header\";\nimport InputTodo from \"./InputTodo\";\n\nimport axios from \"axios\";\n// import { uuid } from \"uuid\";\n\n\nconst TodoContainer = props => {\n    const [todos, setTodos] = useState([])\n    const [show, setShow] = useState(false)\n\n    const handleChange = id => {\n        setTodos(\n            todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed\n                }\n                return todo\n            })\n        )\n        setShow(!show)\n    }\n\n    const delTodo = id => {\n        setTodos([\n            ...todos.filter(todo => {\n                return todo.id !== id\n            }),\n        ])\n    }\n\n    const addTodoItem = title => {\n        const newTodo = {\n            id: Math.random(),\n            title: title,\n            completed: false,\n        }\n        setTodos([...todos, newTodo])\n    }\n\n    useEffect(() => {\n        console.log(\"test run\")\n        axios\n            .get(\"https://jsonplaceholder.typicode.com/todos?_limit=10\")\n            .then(response => setTodos(response.data))\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <Header headerSpan={show} />\n            <InputTodo addTodoProps={addTodoItem} />\n            <TodosList\n                todos={todos}\n                handleChangeProps={handleChange}\n                deleteTodoProps={delTodo}\n            />\n        </div>\n    )\n}\n\nexport default TodoContainer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport TodoContainer from \"./components/TodoContainer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}